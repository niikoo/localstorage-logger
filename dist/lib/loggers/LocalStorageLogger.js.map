{"version":3,"sources":["../../../lib/loggers/LocalStorageLogger.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAE3D;;;GAGG;AACH;IAGE;;;;OAIG;IACH,4BAAY,MAAwC,EAAU,WAAoB;QAApB,gBAAW,GAAX,WAAW,CAAS;QAChF,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,CAAY;YAC5C,SAAS,EAAE,MAAM,CAAC,OAAO;YACzB,cAAc,EAAE,MAAM,CAAC,iBAAiB;SACzC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,gCAAG,GAAH,UAAI,KAAgB;QAClB,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,uCAAU,GAAV;QACE,IAAM,OAAO,GAAG,IAAI,KAAK,EAAa,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IACH,yBAAC;AAAD,CApCA,AAoCC,IAAA","file":"LocalStorageLogger.js","sourceRoot":"","sourcesContent":["import {ILogger} from './ILogger';\nimport {ILogEntry} from '../core/ILogEntry';\nimport {ILocalStorageLoggerConfiguration} from './ILocalStorageLoggerConfiguration';\nimport {LimitedSizeQueue} from '../queue/LimitedSizeQueue';\n\n/**\n * Logger that logs to a queue in local storage. Will overwrite oldest entries\n * when desired size is exceeded.\n */\nexport class LocalStorageLogger implements ILogger {\n  private _queue: LimitedSizeQueue<ILogEntry>;\n\n  /**\n   * Constructs a new local storage logger.\n   * @param config The configuration defining the unique queue name, desired size etc.\n   * @param _nextLogger The next logger in the \"log chain\"\n   */\n  constructor(config: ILocalStorageLoggerConfiguration, private _nextLogger: ILogger) {\n    this._queue = new LimitedSizeQueue<ILogEntry>({\n      keyPrefix: config.logName,\n      maxSizeInBytes: config.maxLogSizeInBytes\n    });\n  }\n\n  /**\n   * Logs an entry to local storage.\n   */\n  log(entry: ILogEntry) {\n    try {\n      this._queue.enqueue(entry);\n    } catch (error) {\n      console.error('Failed to log to local storage.', error);\n    } finally {\n      this._nextLogger.log(entry);\n    }\n  }\n\n  /**\n   * Returns all log entries that are still held in local storage.\n   */\n  allEntries() : Array<ILogEntry> {\n    const entries = new Array<ILogEntry>();\n    this._queue.iterate(entry => entries.push(entry));\n    return entries;\n  }\n}\n"]}