{"version":3,"file":"LocalStorageLogger.js","sourceRoot":"","sources":["../../../lib/loggers/LocalStorageLogger.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;;;;;AAM3D;;;;AAAA;IAGE;;;;OAIG;IACH,4BAAY,MAAwC,EAAU,WAAoB;QAApB,gBAAW,GAAX,WAAW,CAAS;QAChF,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,CAAY;YAC5C,SAAS,EAAE,MAAM,CAAC,OAAO;YACzB,cAAc,EAAE,MAAM,CAAC,iBAAiB;SACzC,CAAC,CAAC;KACJ;IAED;;OAEG;;;;IACH,gCAAG;;;IAAH,UAAI,KAAgB;QAClB,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC5B;QAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;SACzD;gBAAS,CAAC;YACT,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC7B;KACF;IAED;;OAEG;;;;IACH,uCAAU;;;IAAV;QACE,IAAM,OAAO,GAAG,IAAI,KAAK,EAAa,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC;KAChB;6BA5CH;IA6CC,CAAA;;;;;AApCD,8BAoCC","sourcesContent":["import {ILogger} from './ILogger';\r\nimport {ILogEntry} from '../core/ILogEntry';\r\nimport {ILocalStorageLoggerConfiguration} from './ILocalStorageLoggerConfiguration';\r\nimport {LimitedSizeQueue} from '../queue/LimitedSizeQueue';\r\n\r\n/**\r\n * Logger that logs to a queue in local storage. Will overwrite oldest entries\r\n * when desired size is exceeded.\r\n */\r\nexport class LocalStorageLogger implements ILogger {\r\n  private _queue: LimitedSizeQueue<ILogEntry>;\r\n\r\n  /**\r\n   * Constructs a new local storage logger.\r\n   * @param config The configuration defining the unique queue name, desired size etc.\r\n   * @param _nextLogger The next logger in the \"log chain\"\r\n   */\r\n  constructor(config: ILocalStorageLoggerConfiguration, private _nextLogger: ILogger) {\r\n    this._queue = new LimitedSizeQueue<ILogEntry>({\r\n      keyPrefix: config.logName,\r\n      maxSizeInBytes: config.maxLogSizeInBytes\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Logs an entry to local storage.\r\n   */\r\n  log(entry: ILogEntry) {\r\n    try {\r\n      this._queue.enqueue(entry);\r\n    } catch (error) {\r\n      console.error('Failed to log to local storage.', error);\r\n    } finally {\r\n      this._nextLogger.log(entry);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all log entries that are still held in local storage.\r\n   */\r\n  allEntries() : Array<ILogEntry> {\r\n    const entries = new Array<ILogEntry>();\r\n    this._queue.iterate(entry => entries.push(entry));\r\n    return entries;\r\n  }\r\n}\r\n"]}