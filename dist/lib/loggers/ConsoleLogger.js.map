{"version":3,"file":"ConsoleLogger.js","sourceRoot":"","sources":["../../../lib/loggers/ConsoleLogger.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;;;;AAK5C,MAAM;;;;;;IAMJ,YAAoB,UAA8B,EAAU,WAAoB;QAA5D,eAAU,GAAV,UAAU,CAAoB;QAAU,gBAAW,GAAX,WAAW,CAAS;KAC/E;;;;;IAMD,GAAG,CAAC,KAAgB;QAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,CAAA,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACnB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK,CAAC;YACpB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,CAAC,CAAC;gBACxE,KAAK,CAAC;SACT;QACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC7B;CACF","sourcesContent":["import {ILogger} from './ILogger';\r\nimport {ILogEntry} from '../core/ILogEntry';\r\nimport {ILogEntryFormatter} from '../formatters/ILogEntryFormatter';\r\nimport { LogLevel } from '../core/LogLevel';\r\n\r\n/**\r\n * Logger that logs to the console.\r\n */\r\nexport class ConsoleLogger implements ILogger {\r\n  /**\r\n   * Constructs a console logger.\r\n   * @param _formatter The formatter used to format the entry for the console\r\n   * @param _nextLogger The next logger in the \"log chain\"\r\n   */\r\n  constructor(private _formatter: ILogEntryFormatter, private _nextLogger: ILogger) {\r\n  }\r\n\r\n  /**\r\n   * Logs an entry to the console.\r\n   * @param entry The entry to log\r\n   */\r\n  log(entry: ILogEntry) {\r\n    const formattedMessage = this._formatter.format(entry);\r\n    switch(entry.level) {\r\n      case LogLevel.DEBUG:\r\n        console.log(formattedMessage);\r\n        break;\r\n      case LogLevel.INFO:\r\n        console.info(formattedMessage);\r\n        break;\r\n      case LogLevel.ERROR:\r\n      case LogLevel.FATAL:\r\n        console.error(formattedMessage);\r\n        break;\r\n      case LogLevel.WARN:\r\n        console.warn(formattedMessage);\r\n        break;\r\n      case LogLevel.TRACE:\r\n        console.trace(formattedMessage);\r\n        break;\r\n      default:\r\n        console.debug('ERROR! UNKNOWN LOG LEVEL. Message: ' + formattedMessage);\r\n        break;\r\n    }\r\n    this._nextLogger.log(entry);\r\n  }\r\n}\r\n"]}