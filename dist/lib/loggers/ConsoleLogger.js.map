{"version":3,"file":"ConsoleLogger.js","sourceRoot":"","sources":["../../../lib/loggers/ConsoleLogger.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;;;;AAK5C,MAAM;;;;;;IAOJ,YAAoB,UAA8B,EAAU,WAAoB;QAA5D,eAAU,GAAV,UAAU,CAAoB;QAAU,gBAAW,GAAX,WAAW,CAAS;uBAN5C,EAAE;KAOrC;;;;;IAMD,GAAG,CAAC,KAAgB;QAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,CAAA,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACnB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK,CAAC;YACpB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,CAAC,CAAC;gBACxE,KAAK,CAAC;SACT;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;YAC7B,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACpC;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KAC7B;;;;IAID,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACrB;CACF","sourcesContent":["import {ILogger} from './ILogger';\nimport {ILogEntry} from '../core/ILogEntry';\nimport {ILogEntryFormatter} from '../formatters/ILogEntryFormatter';\nimport { LogLevel } from '../core/LogLevel';\n\n/**\n * Logger that logs to the console.\n */\nexport class ConsoleLogger implements ILogger {\n  private entries: Array<ILogEntry> = [];\n  /**\n   * Constructs a console logger.\n   * @param _formatter The formatter used to format the entry for the console\n   * @param _nextLogger The next logger in the \"log chain\"\n   */\n  constructor(private _formatter: ILogEntryFormatter, private _nextLogger: ILogger) {\n  }\n\n  /**\n   * Logs an entry to the console.\n   * @param entry The entry to log\n   */\n  log(entry: ILogEntry) {\n    const formattedMessage = this._formatter.format(entry);\n    switch(entry.level) {\n      case LogLevel.DEBUG:\n        console.log(formattedMessage);\n        break;\n      case LogLevel.INFO:\n        console.info(formattedMessage);\n        break;\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(formattedMessage);\n        break;\n      case LogLevel.WARN:\n        console.warn(formattedMessage);\n        break;\n      case LogLevel.TRACE:\n        console.trace(formattedMessage);\n        break;\n      default:\n        console.debug('ERROR! UNKNOWN LOG LEVEL. Message: ' + formattedMessage);\n        break;\n    }\n    if(this.entries.length > 100) {\n      let discard = this.entries.shift();\n    }\n    this.entries.push(entry);\n    this._nextLogger.log(entry);\n  }\n  /**\n   * Returns all log entries that are still held in local storage.\n   */\n  allEntries() : Array<ILogEntry> {\n    return this.entries;\n  }\n}\n"]}