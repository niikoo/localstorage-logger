{"version":3,"file":"ConsoleLogger.js","sourceRoot":"","sources":["../../../lib/loggers/ConsoleLogger.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C;;GAEG;AACH;IACE;;;;OAIG;IACH,uBAAoB,UAA8B,EAAU,WAAoB;QAA5D,eAAU,GAAV,UAAU,CAAoB;QAAU,gBAAW,GAAX,WAAW,CAAS;IAChF,CAAC;IAED;;;OAGG;IACH,2BAAG,GAAH,UAAI,KAAgB;QAClB,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvD,MAAM,CAAA,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACnB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK,CAAC;YACpB,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,IAAI;gBAChB,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC/B,KAAK,CAAC;YACR,KAAK,QAAQ,CAAC,KAAK;gBACjB,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;gBAChC,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,KAAK,CAAC,qCAAqC,GAAG,gBAAgB,CAAC,CAAC;gBACxE,KAAK,CAAC;QACV,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IACH,oBAAC;AAAD,CAAC,AAvCD,IAuCC","sourcesContent":["import {ILogger} from './ILogger';\nimport {ILogEntry} from '../core/ILogEntry';\nimport {ILogEntryFormatter} from '../formatters/ILogEntryFormatter';\nimport { LogLevel } from '../core/LogLevel';\n\n/**\n * Logger that logs to the console.\n */\nexport class ConsoleLogger implements ILogger {\n  /**\n   * Constructs a console logger.\n   * @param _formatter The formatter used to format the entry for the console\n   * @param _nextLogger The next logger in the \"log chain\"\n   */\n  constructor(private _formatter: ILogEntryFormatter, private _nextLogger: ILogger) {\n  }\n\n  /**\n   * Logs an entry to the console.\n   * @param entry The entry to log\n   */\n  log(entry: ILogEntry) {\n    const formattedMessage = this._formatter.format(entry);\n    switch(entry.level) {\n      case LogLevel.DEBUG:\n        console.log(formattedMessage);\n        break;\n      case LogLevel.INFO:\n        console.info(formattedMessage);\n        break;\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(formattedMessage);\n        break;\n      case LogLevel.WARN:\n        console.warn(formattedMessage);\n        break;\n      case LogLevel.TRACE:\n        console.trace(formattedMessage);\n        break;\n      default:\n        console.debug('ERROR! UNKNOWN LOG LEVEL. Message: ' + formattedMessage);\n        break;\n    }\n    console.log(formattedMessage);\n    this._nextLogger.log(entry);\n  }\n}\n"]}