{"version":3,"sources":["../../../lib/queue/LimitedSizeQueue.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAGxC;;;GAGG;AACH,MAAM;IAGJ;;;OAGG;IACH,YAAoB,OAA4B;QAA5B,YAAO,GAAP,OAAO,CAAqB;QAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAY,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAgB;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACpD,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,gBAAgB,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,OAAO,GAAG,mEAAmE,CAAC;YACpF,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QACzD,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE,CAAC;gBAC7C,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;YACrC,CAAC;YACD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAAC,MAAM,CAAC;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,OAAO;QACL,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,QAAmC;QACzC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YACnC,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAY,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;YAC9D,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;CACF","file":"LimitedSizeQueue.js","sourceRoot":"","sourcesContent":["import {Node} from './Node';\nimport {Bookkeeper} from './Bookkeeper';\nimport {IQueueConfiguration} from './IQueueConfiguration';\n\n/**\n * A limited-size queue that is persisted to local storage. Enqueuing\n * elements can remove the oldest elements in order to free up space.\n */\nexport class LimitedSizeQueue<ILogEntry> {\n  private _bookkeeper: Bookkeeper<ILogEntry>;\n\n  /**\n   * Creates/restores a queue based on the configuration provided.\n   * @param _config The settings for the queue\n   */\n  constructor(private _config: IQueueConfiguration) {\n    this._bookkeeper = new Bookkeeper<ILogEntry>(_config);\n    this._bookkeeper.reset();\n  }\n\n  /**\n   * Enqueues an item in the queue. Throws if the value is too big to fit in local storage\n   * based on the maximum sized defined in the queue configuration. May also throw\n   * if local storage is out of space or corrupted.\n   */\n  enqueue(value: ILogEntry) : void {\n    const node = this._bookkeeper.createNextNode(value);\n    const spaceRequirement = node.estimatedSize();\n    const canFit = this._config.maxSizeInBytes >= spaceRequirement;\n    if (!canFit) {\n      const message = 'ng-Alogy: Value is too big to store. Reverting to previous state.';\n      console.error(message);\n      this._bookkeeper.reset();\n      throw new Error(message);\n    }\n    const remainingSpace = this._bookkeeper.remainingSpace();\n    if (remainingSpace >= 0) {\n      this._bookkeeper.store();\n    } else {\n      while (this._bookkeeper.remainingSpace() < 0) {\n        this._bookkeeper.deleteFirstNode();\n      }\n      this._bookkeeper.store();\n    }\n  }\n\n  /**\n   * If the queue has at least 1 item, it removes and returns the oldest item from the queue.\n   * Otherwise, it will return nothing.\n   */\n  dequeue(): ILogEntry | void {\n    if (this.isEmpty()) return;\n    const node = this._bookkeeper.deleteFirstNode();\n    this._bookkeeper.store();\n    return node.value;\n  }\n\n  /**\n   * Returns true if the queue is empty.\n   */\n  isEmpty() : boolean {\n    return this._bookkeeper.isEmpty();\n  }\n\n  /**\n   * Iterates (without removal) through all items stored in the queue.\n   */\n  iterate(callback: (item: ILogEntry) => void) {\n    this._bookkeeper.iterateIndexValues(i => {\n      const node = Node.fromLocalStorage<ILogEntry>(this._config, i)\n      callback(node.value);\n    });\n  }\n}\n"]}