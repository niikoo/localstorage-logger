{"version":3,"file":"LimitedSizeQueue.js","sourceRoot":"","sources":["../../../lib/queue/LimitedSizeQueue.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;;;;;AAOxC;;;;AAAA;IAGE;;;OAGG;IACH,0BAAoB,OAA4B;QAA5B,YAAO,GAAP,OAAO,CAAqB;QAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAY,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;KAC1B;IAED;;;;OAIG;;;;;;IACH,kCAAO;;;;;IAAP,UAAQ,KAAgB;QACtB,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACpD,IAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,gBAAgB,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,IAAM,OAAO,GAAG,mEAAmE,CAAC;YACpF,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1B;QACD,IAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QACzD,EAAE,CAAC,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE,CAAC;gBAC7C,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;aACpC;YACD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;KACF;IAED;;;OAGG;;;;;IACH,kCAAO;;;;IAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAAC,MAAM,CAAC;QAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;KACnB;IAED;;OAEG;;;;IACH,kCAAO;;;IAAP;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;KACnC;IAED;;OAEG;;;;IACH,kCAAO;;;IAAP,UAAQ,QAAmC;QAA3C,iBAKC;QAJC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAA,CAAC;YACnC,IAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAY,KAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;YAC9D,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB,CAAC,CAAC;KACJ;2BAxEH;IAyEC,CAAA;;;;;AAjED,4BAiEC","sourcesContent":["import {Node} from './Node';\r\nimport {Bookkeeper} from './Bookkeeper';\r\nimport {IQueueConfiguration} from './IQueueConfiguration';\r\n\r\n/**\r\n * A limited-size queue that is persisted to local storage. Enqueuing\r\n * elements can remove the oldest elements in order to free up space.\r\n */\r\nexport class LimitedSizeQueue<ILogEntry> {\r\n  private _bookkeeper: Bookkeeper<ILogEntry>;\r\n\r\n  /**\r\n   * Creates/restores a queue based on the configuration provided.\r\n   * @param _config The settings for the queue\r\n   */\r\n  constructor(private _config: IQueueConfiguration) {\r\n    this._bookkeeper = new Bookkeeper<ILogEntry>(_config);\r\n    this._bookkeeper.reset();\r\n  }\r\n\r\n  /**\r\n   * Enqueues an item in the queue. Throws if the value is too big to fit in local storage\r\n   * based on the maximum sized defined in the queue configuration. May also throw\r\n   * if local storage is out of space or corrupted.\r\n   */\r\n  enqueue(value: ILogEntry) : void {\r\n    const node = this._bookkeeper.createNextNode(value);\r\n    const spaceRequirement = node.estimatedSize();\r\n    const canFit = this._config.maxSizeInBytes >= spaceRequirement;\r\n    if (!canFit) {\r\n      const message = 'ng-Alogy: Value is too big to store. Reverting to previous state.';\r\n      console.error(message);\r\n      this._bookkeeper.reset();\r\n      throw new Error(message);\r\n    }\r\n    const remainingSpace = this._bookkeeper.remainingSpace();\r\n    if (remainingSpace >= 0) {\r\n      this._bookkeeper.store();\r\n    } else {\r\n      while (this._bookkeeper.remainingSpace() < 0) {\r\n        this._bookkeeper.deleteFirstNode();\r\n      }\r\n      this._bookkeeper.store();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the queue has at least 1 item, it removes and returns the oldest item from the queue.\r\n   * Otherwise, it will return nothing.\r\n   */\r\n  dequeue(): ILogEntry | void {\r\n    if (this.isEmpty()) return;\r\n    const node = this._bookkeeper.deleteFirstNode();\r\n    this._bookkeeper.store();\r\n    return node.value;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the queue is empty.\r\n   */\r\n  isEmpty() : boolean {\r\n    return this._bookkeeper.isEmpty();\r\n  }\r\n\r\n  /**\r\n   * Iterates (without removal) through all items stored in the queue.\r\n   */\r\n  iterate(callback: (item: ILogEntry) => void) {\r\n    this._bookkeeper.iterateIndexValues(i => {\r\n      const node = Node.fromLocalStorage<ILogEntry>(this._config, i)\r\n      callback(node.value);\r\n    });\r\n  }\r\n}\r\n"]}