{"version":3,"file":"Node.js","sourceRoot":"","sources":["../../../lib/queue/Node.ts"],"names":[],"mappings":";;;;AAMA,MAAM;;;;;;;IAUJ,YAAY,MAA2B,EAAE,KAAa,EAAS,KAAgB;QAAhB,UAAK,GAAL,KAAK,CAAW;QAC7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC9C;;;;IAKD,aAAa;QACX,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;KACvD;;;;;IAMD,KAAK;QACH,IAAI,CAAC;YACH,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC;SACb;QAAC,KAAK,CAAA,CAAC,EAAE,EAAE,CAAC;YACX,MAAM,CAAC,KAAK,CAAC;SACd;KACF;;;;IAKD,MAAM;QACJ,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;IAOD,MAAM,CAAC,SAAS,CAAC,MAA2B,EAAE,KAAa;QACzD,MAAM,CAAC,GAAG,MAAM,CAAC,SAAS,SAAS,KAAK,EAAE,CAAC;KAC5C;;;;;;IAOD,MAAM,CAAC,gBAAgB,CAAY,MAA2B,EAAE,KAAa;QAC3E,IAAI,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QACzE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,IAAI,CAAY,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAClD;CACF","sourcesContent":["import {IQueueConfiguration} from './IQueueConfiguration';\r\n\r\n/**\r\n * Each node corresponds to an entry within the queue. This helps with\r\n * storage and removal from local storage.\r\n */\r\nexport class Node<ILogEntry> {\r\n  private _key: string;\r\n  private _serializedNode: string;\r\n\r\n  /**\r\n   * Constructs a node representing an entry in the queue.\r\n   * @param config The queue configuration. This is used to provide the prefix for the key.\r\n   * @param index The index within the queue\r\n   * @param value The value of the entry\r\n   */\r\n  constructor(config: IQueueConfiguration, index: number, public value: ILogEntry) {\r\n    this._key = Node.createKey(config, index);\r\n    this._serializedNode = JSON.stringify(value);\r\n  }\r\n\r\n  /**\r\n   * Returns an estimate of the size this will take up in local storage.\r\n   */\r\n  estimatedSize() {\r\n    return this._serializedNode.length + this._key.length;\r\n  }\r\n\r\n  /**\r\n   * Stores the serialized entry in local storage.\r\n   * @return {boolean} Success?\r\n   */\r\n  store() : boolean {\r\n    try {\r\n      localStorage.setItem(this._key, this._serializedNode);\r\n      return true;\r\n    } catch(ex) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the entry from local storage if it exists.\r\n   */\r\n  remove() {\r\n    localStorage.removeItem(this._key);\r\n  }\r\n\r\n  /**\r\n   * Creates a key for an entry.\r\n   * @param config The configuration containing the key prefix\r\n   * @param index The index of the entry in the queue\r\n   */\r\n  static createKey(config: IQueueConfiguration, index: number) {\r\n    return `${config.keyPrefix}-item-${index}`;\r\n  }\r\n\r\n  /**\r\n   * Loads an entry from local storage and deserializes it. Returns the associated node.\r\n   * @param config The configuration containing the key prefix\r\n   * @param index The index of the entry in the queue\r\n   */\r\n  static fromLocalStorage<ILogEntry>(config: IQueueConfiguration, index: number): Node<ILogEntry> {\r\n    let serializedNode = localStorage.getItem(Node.createKey(config, index));\r\n    const value = JSON.parse(serializedNode || '{}');\r\n    return new Node<ILogEntry>(config, index, value);\r\n  }\r\n}"]}