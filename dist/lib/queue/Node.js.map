{"version":3,"sources":["../../../lib/queue/Node.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH;IAIE;;;;;OAKG;IACH,cAAY,MAA2B,EAAE,KAAa,EAAS,KAAQ;QAAR,UAAK,GAAL,KAAK,CAAG;QACrE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,4BAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,oBAAK,GAAL;QACE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACH,qBAAM,GAAN;QACE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACI,cAAS,GAAhB,UAAiB,MAA2B,EAAE,KAAa;QACzD,MAAM,CAAI,MAAM,CAAC,SAAS,cAAS,KAAO,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACI,qBAAgB,GAAvB,UAA2B,MAA2B,EAAE,KAAa;QACnE,IAAI,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QACzE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,IAAI,CAAI,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IACH,WAAC;AAAD,CAvDA,AAuDC,IAAA","file":"Node.js","sourceRoot":"","sourcesContent":["import {IQueueConfiguration} from './IQueueConfiguration';\n\n/**\n * Each node corresponds to an entry within the queue. This helps with\n * storage and removal from local storage.\n */\nexport class Node<T> {\n  private _key: string;\n  private _serializedNode: string;\n\n  /**\n   * Constructs a node representing an entry in the queue.\n   * @param config The queue configuration. This is used to provide the prefix for the key.\n   * @param index The index within the queue\n   * @param value The value of the entry\n   */\n  constructor(config: IQueueConfiguration, index: number, public value: T) {\n    this._key = Node.createKey(config, index);\n    this._serializedNode = JSON.stringify(value);\n  }\n\n  /**\n   * Returns an estimate of the size this will take up in local storage.\n   */\n  estimatedSize() {\n    return this._serializedNode.length + this._key.length;\n  }\n\n  /**\n   * Stores the serialized entry in local storage.\n   */\n  store() {\n    localStorage.setItem(this._key, this._serializedNode);\n  }\n\n  /**\n   * Removes the entry from local storage if it exists.\n   */\n  remove() {\n    localStorage.removeItem(this._key);\n  }\n\n  /**\n   * Creates a key for an entry.\n   * @param config The configuration containing the key prefix\n   * @param index The index of the entry in the queue\n   */\n  static createKey(config: IQueueConfiguration, index: number) {\n    return `${config.keyPrefix}-item-${index}`;\n  }\n\n  /**\n   * Loads an entry from local storage and deserializes it. Returns the associated node.\n   * @param config The configuration containing the key prefix\n   * @param index The index of the entry in the queue\n   */\n  static fromLocalStorage<T>(config: IQueueConfiguration, index: number): Node<T> {\n    let serializedNode = localStorage.getItem(Node.createKey(config, index));\n    const value = JSON.parse(serializedNode || '{}');\n    return new Node<T>(config, index, value);\n  }\n}\n"]}