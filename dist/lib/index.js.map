{"version":3,"sources":["../../lib/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAA,EAAc,MAAO,yBAAA,CAA0B;AACxD,OAAO,EAAE,gBAAA,EAAiB,MAAO,+BAAA,CAAgC;AACjE,OAAO,EAAE,qBAAA,EAAsB,MAAO,iCAAA,CAAkC;AAKxE,OAAO,EAAE,kBAAA,EAAmB,MAAO,8BAAA,CAA+B;AAClE,OAAO,EAAE,QAAA,EAAS,MAAO,iBAAA,CAAkB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,sBAAA,CAAuB;AAGlD,OAAO,EAAE,gBAAA,EAAiB,MAAO,0BAAA,CAA2B;AAE5D,OAAO,EAAE,kBAAA,EAAmB,MAAO,8BAAA,CAA+B;AAClE,OAAO,EAAE,aAAA,EAAc,MAAO,yBAAA,CAA0B;AACxD,OAAO,EAAE,UAAA,EAAW,MAAO,sBAAA,CAAuB;AAClD,OAAO,EAAE,gBAAA,EAAiB,MAAO,+BAAA,CAAgC;AACjE,OAAO,EAAE,QAAA,EAAS,MAAO,iBAAA,CAAkB;AAE3C,OAAO,EAAE,qBAAA,EAAsB,MAAO,iCAAA,CAAkC;AAGxE,6BAA6B;AAC7B,OAAO,EAAE,UAAA,EAAY,YAAA,EAAa,MAAO,eAAA,CAAgB;AACzD,OAAO,SAAA,CAAU;AAGjB,MAAM;IAAN;QAOE;;;;;WAKG;QACI,gBAAW,GAA4B,IAAI,YAAY,EAAa,CAAC;QACpE,iBAAY,GAAW,GAAG,CAAC,CAAC,4IAA4I;QACxK,uBAAkB,GAAe,MAAM,IAAI,IAAI,CAAC;IAyG1D,CAAC;IAxGC;;;;;;OAMG;IACH,MAAM,CACJ,QAA6B,mBAAmB,CAAC,aAAa,EAC9D,MAAwC;QAExC,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACxC,gDAAgD;QAChD,IAAI,CAAC,aAAa,GAAG,IAAI,UAAU,EAAE,CAAC;QACtC,IAAI,CAAC,eAAe,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7E,IAAI,CAAC,oBAAoB,GAAG,IAAI,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACjF,IAAI,CAAC,uBAAuB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,sCAAsC;IAI7I,CAAC;IAED,SAAS,CACP,QAAgB,EAChB,QAA6B,mBAAmB,CAAC,aAAa;QAE9D,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,UAAU,CAAC,KAA0B,EAAE,KAAe,EAAE,OAAe,EAAE,QAAgB,EAAE,IAAa;QACtG,IAAI,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,WAAW,EAAE,CAAC;QACnD,EAAE,CAAA,CAAC,OAAO,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;YAC9B,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QACnE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,CAAC;QACD;;UAEE;QACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAY;YAC/B,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH;;WAEG;QACH,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,KAAK,mBAAmB,CAAC,gBAAgB;gBACvC,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,+CAA+C;gBACrF;;qBAEK;gBACL,KAAK,CAAC;YACR,KAAK,mBAAmB,CAAC,aAAa;gBACpC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC;oBAC5B,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI;iBAC3B,CAAC,CAAC;gBACH,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAED,aAAa;QACX,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,CAAC,GAAG,CAC/C,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CACtC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,IAAY,EAAE,WAAmB,EAAE,EAAE,eAAuB,GAAG;QACzE,IAAI,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACnH,CAAC;IAED;;;;;;OAMG;IACH,eAAe,CAAC,GAAW,EAAE,WAAmB,EAAE,EAAE,eAAuB,GAAG;QAC5E,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;QACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAAC,IAAI,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC;QACnE,IAAI,GAAG,GAAG,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,GAAG,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;QAC1D,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACnH,CAAC;;AACI,gBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,oBAAc,GAAmE,MAAM,EAC7F,CAAC;AAGF,MAAM;IACJ;;;;;OAKG;IACH,YACU,MAAa,EACb,QAA6B,mBAAmB,CAAC,aAAa,EAC9D,WAAmB,EAAE;QAFrB,WAAM,GAAN,MAAM,CAAO;QACb,UAAK,GAAL,KAAK,CAAyD;QAC9D,aAAQ,GAAR,QAAQ,CAAa;IAE/B,CAAC;IACD,KAAK,CAAC,OAAe,EAAE,IAAc;QACnC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnF,CAAC;IACD,IAAI,CAAC,OAAe,EAAE,IAAc;QAClC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAClF,CAAC;IACD,IAAI,CAAC,OAAe,EAAE,IAAc;QAClC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAClF,CAAC;IACD,KAAK,CAAC,OAAe,EAAE,IAAc;QACnC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnF,CAAC;CACF;AAED,MAAM,CAAN,IANY,mBASX;AAHD,WANY,mBAAA;IAOV,+EAAa,CAAA;IACb,qFAAgB,CAAA,CANC,sBAAA;AAOnB,CAAC,EATW,mBAAA,KAAA,mBAAA,QASX","file":"index.js","sourceRoot":"","sourcesContent":["import { ILogEntry } from './core/ILogEntry';\nimport { ConsoleLogger } from './loggers/ConsoleLogger';\nimport { DefaultFormatter } from './formatters/DefaultFormatter';\nimport { GoogleAnalyticsLogger } from './loggers/GoogleAnalyticsLogger';\nimport { ILocalStorageLoggerConfiguration } from './loggers/ILocalStorageLoggerConfiguration';\nimport { ILog } from './ILog';\nimport { IQueueConfiguration } from './queue/IQueueConfiguration';\nimport { LimitedSizeQueue } from './queue/LimitedSizeQueue';\nimport { LocalStorageLogger } from './loggers/LocalStorageLogger';\nimport { LogLevel } from './core/LogLevel';\nimport { NullLogger } from './loggers/NullLogger';\n\nexport { IQueueConfiguration } from './queue/IQueueConfiguration';\nexport { LimitedSizeQueue } from './queue/LimitedSizeQueue';\nexport { ILocalStorageLoggerConfiguration } from './loggers/ILocalStorageLoggerConfiguration';\nexport { LocalStorageLogger } from './loggers/LocalStorageLogger';\nexport { ConsoleLogger } from './loggers/ConsoleLogger';\nexport { NullLogger } from './loggers/NullLogger';\nexport { DefaultFormatter } from './formatters/DefaultFormatter';\nexport { LogLevel } from './core/LogLevel';\nexport { ILog } from './ILog';\nexport { GoogleAnalyticsLogger } from './loggers/GoogleAnalyticsLogger';\nexport { ILogEntry } from './core/ILogEntry';\n\n// imports for this file only\nimport { Injectable, EventEmitter } from '@angular/core';\nimport 'rxjs/Rx';\n\n\nexport class Alogy {\n  private _alogy: ILog;\n  private formatter: DefaultFormatter;\n  private chainTerminal: NullLogger;\n  private consoleLogChain: ConsoleLogger;\n  private localStorageLogChain: LocalStorageLogger;\n  private googleAnalyticsLogChain: GoogleAnalyticsLogger;\n  /**\n   * New log entry event -> triggers on new logs\n   * @private\n   * @type {number}\n   * @memberof Alogy\n   */\n  public newLogEntry: EventEmitter<ILogEntry> = new EventEmitter<ILogEntry>();\n  private logGroupSize: number = 100; // Size of log group.Do not touch, unless you're know what you're doing. Default 100, that is for example 0- 99. With group 6, it's: 600-699\n  private _timestampProvider: () => Date = () => new Date;\n  /**\n   * Set up Alogy - Global config\n   * \n   * @param {AlogyLogDestination[]} [logTo=[AlogyLogDestination.LOCAL_STORAGE]] Set this to ´GOOGLE_ANALYTICS´ to have that as upper layer, if ´LOCAL_STORAGE´, analytics is not used.\n   * @param {ILocalStorageLoggerConfiguration} config Local storage config\n   * @memberof Alogy\n   */\n  create(\n    logTo: AlogyLogDestination = AlogyLogDestination.LOCAL_STORAGE,\n    config: ILocalStorageLoggerConfiguration\n  ){\n    this.formatter = new DefaultFormatter();\n    // Chain of responsibility style pattern here...\n    this.chainTerminal = new NullLogger();\n    this.consoleLogChain = new ConsoleLogger(this.formatter, this.chainTerminal);\n    this.localStorageLogChain = new LocalStorageLogger(config, this.consoleLogChain);\n    this.googleAnalyticsLogChain = new GoogleAnalyticsLogger(this.formatter, this.localStorageLogChain); //(config, this.localStorageLogChain);\n\n    \n\n  }\n\n  getLogAPI(\n    logGroup: number,\n    logTo: AlogyLogDestination = AlogyLogDestination.LOCAL_STORAGE\n  ):LogAPI {\n    return new LogAPI(this, logTo, logGroup);\n  }\n\n  writeToLog(logTo: AlogyLogDestination, level: LogLevel, message: string, logGroup: number, code?: number) {\n    let time = this._timestampProvider().toISOString();\n    if(typeof code == 'undefined') {\n      code = this.stringToLogCode(message, logGroup, this.logGroupSize)\n    } else {\n      code = this.codeToGroup(code, logGroup, this.logGroupSize);\n    }\n    /*\n    * All logs trigger the newLogEntry event\n    */\n    this.newLogEntry.emit(<ILogEntry>{\n      code: code,\n      message: message,\n      time: time,\n      level: level\n    });\n    \n    /**\n     * To outputs\n     */\n    switch (logTo) {\n      case AlogyLogDestination.GOOGLE_ANALYTICS:\n        console.error('not implemented yet'); /** @todo implement GOOGLE ANALYTICS LOGGING */  \n        /*this.localStorageLogChain.log({\n          level, time, message: message\n        });*/\n        break;\n      case AlogyLogDestination.LOCAL_STORAGE:\n        this.localStorageLogChain.log({\n          level, time, message, code\n        });\n        break;\n    }\n  }\n\n  exportToArray(): string[] {\n    return this.localStorageLogChain.allEntries().map(\n      entry => this.formatter.format(entry)\n    );\n  }\n\n  /**\n   * Put log code into the log group.\n   * @param {number} code Log code\n   * @param {number} [logGroup=99] Log group \n   * @returns {number} Log code within group\n   * @memberof LogAPI\n   */\n  codeToGroup(code: number, logGroup: number = 99, logGroupSize: number = 100): number {\n    let min = logGroup * this.logGroupSize;\n    let max = min + (this.logGroupSize - 1);\n    return (((code < min || code > (min + (this.logGroupSize - 1))) ? this.stringToLogCode(code.toString()) : code));\n  }\n\n  /**\n   * Turn a string into a log code, if you don't know which to use or want it to be generated from the string\n   * @param {String} stc String to turn into a 'code', an number within the range of the logging group\n   * @param {number} [logGroup=99] Log group\n   * @returns {number} Log code within group\n   * @memberof LogAPI\n   */\n  stringToLogCode(stc: String, logGroup: number = 99, logGroupSize: number = 100): number {\n    let prep = 0, code = 0;\n    for (let i = 0; i < stc.length; i++) { prep += stc.charCodeAt(i); }\n    let min = logGroup * this.logGroupSize;\n    let fld = Math.floor((this.logGroupSize / prep) * this.logGroupSize);\n    code = parseInt(logGroup + ((fld < 10) ? '0' : '') + fld);\n    return (((code < min || code > (min + (this.logGroupSize - 1))) ? this.stringToLogCode(code.toString()) : code));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nexport class LogAPI implements ILog {\n  /**\n   * Construct a new LogAPI instance \n   * @param _alogy A reference to the used Alogy instance\n   * @param logTo Log destination?\n   * @param logGroup Which log group\n   */\n  constructor(\n    private _alogy: Alogy,\n    private logTo: AlogyLogDestination = AlogyLogDestination.LOCAL_STORAGE,\n    private logGroup: number = 99\n  ) {\n  }\n  debug(message: string, code ?: number) {\n    this._alogy.writeToLog(this.logTo, LogLevel.DEBUG, message, this.logGroup, code);\n  }\n  info(message: string, code ?: number) {\n    this._alogy.writeToLog(this.logTo, LogLevel.INFO, message, this.logGroup, code);\n  }\n  warn(message: string, code ?: number) {\n    this._alogy.writeToLog(this.logTo, LogLevel.WARN, message, this.logGroup, code);\n  }\n  error(message: string, code ?: number) {\n    this._alogy.writeToLog(this.logTo, LogLevel.ERROR, message, this.logGroup, code);\n  }\n}\n\nexport enum AlogyLogDestination {\n  LOCAL_STORAGE, // LS -> CONSOLE\n  GOOGLE_ANALYTICS // GA -> LS -> CONSOLE\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}